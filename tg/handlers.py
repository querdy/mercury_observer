from settings import logger
import asyncio
import aioschedule
from datetime import datetime

from aiogram import Dispatcher, types
from aiogram.dispatcher.filters import Text

from tg import buttons
from scheduler import scheduler
from parser.start_parse import start_parse


def register_handlers_requests(dispatcher: Dispatcher):

    dispatcher.register_message_handler(get_requests,
                                        Text(equals='–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫',
                                             ignore_case=True)
                                        )

    dispatcher.register_message_handler(create_schedule_task,
                                        Text(equals='–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏',
                                             ignore_case=True)
                                        )

    dispatcher.register_message_handler(cancel_schedule_task,
                                        Text(equals='–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å',
                                             ignore_case=True)
                                        )

    dispatcher.register_message_handler(help_response,
                                        commands=["help"],
                                        )

    dispatcher.register_message_handler(start_response,
                                        commands=["start"],
                                        )


async def get_requests(message: types.Message, is_schedule: bool = False):

    def is_good(dataclass_is_verified):
        return 'üçöüêàüôçüèª‚Äç‚ôÄÔ∏è' if dataclass_is_verified else '‚ùå'

    enterprises = start_parse()
    if not enterprises:
        if not is_schedule:
            await message.answer(text="–ó–∞—è–≤–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            logger.info("not is_schedule; –ó–∞—è–≤–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        else:
            logger.info("is_schedule; –ó–∞—è–≤–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")

    else:
        for enterprise in enterprises:
            url = f"http://mercury.vetrf.ru/gve/{enterprise.href}"
            answer = f"{enterprise.enterprise_name} \n - <b>–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {enterprise.numbers_of_requests}</b>;\n "
            for transaction in enterprise.transactions_data:
                pk = 1
                car_num = transaction.car_number.value
                if transaction.trailer_number:
                    trailer_num = transaction.trailer_number.value
                    trailer_string = f"{is_good(transaction.trailer_number.is_verified)} <b>–ù–æ–º–µ—Ä –ø—Ä–∏—Ü–µ–ø–∞:</b> {trailer_num};\n"
                else:
                    trailer_string = ""
                is_confirm = "–û—Ñ–æ—Ä–º–ª–µ–Ω–æ" if transaction.is_confirm else "–ù–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ"
                bill_of_lading = transaction.bill_of_lading
                transaction_type = transaction.transaction_type
                product = transaction.product
                answer += f"\n<b>–ó–∞—è–≤–∫–∞ {pk}:</b>\n" \
                    f"{is_good(transaction.car_number.is_verified)} <b>–ù–æ–º–µ—Ä –∞–≤—Ç–æ:</b> {car_num};\n"\
                    f"{trailer_string}"\
                    f"{is_good(transaction_type.is_verified)} <b>–°–ø–æ—Å–æ–± —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–∑–∫–µ:</b> {transaction_type.value};\n"\
                    f"{is_good(product.is_verified)}<b>–ü—Ä–æ–¥—É–∫—Ç:</b> {product.value};\n"\
                    f"{is_good(transaction.bill_of_lading_date.is_verified)}<b>–ù–æ–º–µ—Ä –¢–¢–ù:</b> {transaction.bill_of_lading} –æ—Ç {transaction.bill_of_lading_date.value};\n"\
                    f"<b>{is_confirm}</b>"
                    # f"<b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> {transaction.recipient_enterprise};\n"\
                    # f"<b>–ù–∞ –ø–ª–æ—â–∞–¥–∫—É:</b> {transaction.recipient_company};\n"
                pk += 1
            answer += f"\n <a href=\"{url}\">–û—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫</a>; \n"
            logger.info('–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞—è–≤–∫–∏')
            logger.debug(answer)
            await message.answer(text=answer,
                                 parse_mode=types.ParseMode.HTML
                                 )


async def create_schedule_task(message: types.Message):
    user_tasks = scheduler.get_user_tasks(message.from_user.id)
    if user_tasks:
        logger.info('–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö —Ç–∞—Å–æ–∫. –£–∂–µ –∑–∞–ø—É—â–µ–Ω–æ')
        await message.answer(text="–£–∂–µ –∑–∞–ø—É—â–µ–Ω–æ")
    else:
        await scheduler.job_create(function=get_requests, params=[message, True])
        logger.info('–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ —Ç–∞—Å–∫–∏ –∑–∞–ø—É—â–µ–Ω—ã')
        await message.answer(text="–ó–∞–ø—É—Å—Ç–∏–ª–æ—Å—å")
        
        
async def cancel_schedule_task(message: types.Message):
    user_tasks = scheduler.get_user_tasks(message.from_user.id)
    if len(user_tasks) > 0:
        scheduler.job_remove(user_tasks)
        logger.info('–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ —Ç–∞—Å–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã')
        await message.answer(text="–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    else:
        logger.info('–ü–æ–ø—ã—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö —Ç–∞—Å–æ–∫. –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ —Ç–∞—Å–∫–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã')
        await message.answer(text="–ù–µ –∑–∞–ø—É—â–µ–Ω–æ")


async def start_response(message: types.Message):
    await message.reply("/help, —á—Ç–æ–±—ã –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ",
                        reply_markup=buttons.mainMenu
                        )


async def help_response(message: types.Message):
    help_message = "–ü–∞—Ä—Å–µ—Ä –Ω–∞–ª–∏—á–∏—è –∑–∞—è–≤–æ–∫ –¥–ª—è –ì–í–≠ –≤ –ú–µ—Ä–∫—É—Ä–∏–∏.\n" + \
        "1. \"–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫\" - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–µ—Ä–º —Å –Ω–æ–≤—ã–º–∏ –∑–∞—è–≤–∫–∞–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π; \n" + \
        "2. \"–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏\" - –ø.1, –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç; \n" + \
        "3. \"–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å\" - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
    await message.reply(text=help_message,
                        reply_markup=buttons.mainMenu,
                        )


async def random_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""

    answer = "–Ø –¥–∞–∂–µ –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å~"
    await message.answer(answer,
                         reply_markup=buttons.mainMenu)

