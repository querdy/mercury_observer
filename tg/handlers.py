import json
from datetime import datetime

import settings
from parser.login.mercury_login import check_cookies
from settings import logger

from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text

from tg import buttons
from tg.decorators import ascii_only_message
from tg.states import UserSingleState, UserPeriodicState, CreateUserState, DeleteUserState
from scheduler import scheduler
from parser.start_parse import start_parse
from tg.utils import save_user_data, delete_user, get_users_data

NOTIFIED_TRANSACTION = []


def register_handlers_requests(dispatcher: Dispatcher):
    dispatcher.register_message_handler(cancel_handler, commands=["cancel"], state="*")

    dispatcher.register_message_handler(cancel_handler, Text(equals='–û—Ç–º–µ–Ω–∞', ignore_case=True), state="*")

    dispatcher.register_message_handler(get_name_for_single, Text(equals='–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫',
                                                                  ignore_case=True))

    dispatcher.register_message_handler(start_single_parse, state=UserSingleState.user_name)

    dispatcher.register_message_handler(get_name_for_periodic, Text(equals='–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏',
                                                                    ignore_case=True))

    dispatcher.register_message_handler(start_periodic_parse, state=UserPeriodicState.user_name)

    dispatcher.register_message_handler(cancel_periodic_parse, Text(equals='–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å',
                                                                    ignore_case=True))

    dispatcher.register_message_handler(help_response, commands=["help"])

    dispatcher.register_message_handler(start_response, commands=["start"])

    dispatcher.register_message_handler(start_user_registration, commands=["adduser"], state=None)

    dispatcher.register_message_handler(load_login, state=CreateUserState.login)

    dispatcher.register_message_handler(load_password, state=CreateUserState.password)

    dispatcher.register_message_handler(load_name, state=CreateUserState.name)

    dispatcher.register_message_handler(delete_user_start, commands=["deleteuser"], state=None)

    dispatcher.register_message_handler(delete_user_confirm, state=DeleteUserState.user_name)

    dispatcher.register_message_handler(delete_user_finish, state=DeleteUserState.confirm)


async def get_name_for_periodic(message: types.Message):
    await UserPeriodicState.user_name.set()
    users_munu = buttons.get_menu_with_users()
    await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', reply_markup=users_munu)


async def get_name_for_single(message: types.Message):
    await UserSingleState.user_name.set()
    users_munu = buttons.get_menu_with_users()
    await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', reply_markup=users_munu)


async def start_periodic_parse(message: types.Message, state: FSMContext):
    await state.update_data(user_name=message.text)
    data = await state.get_data()
    user_name = data.get('user_name')
    user_tasks = scheduler.get_user_tasks(message.from_user.id)
    if user_tasks:
        logger.info('–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö —Ç–∞—Å–æ–∫. –£–∂–µ –∑–∞–ø—É—â–µ–Ω–æ')
        await state.finish()
        await message.answer(text="–£–∂–µ –∑–∞–ø—É—â–µ–Ω–æ", reply_markup=buttons.main_menu)
    else:
        await scheduler.job_create(function=get_requests, params=[message, user_name, True])
        logger.info(f'–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ —Ç–∞—Å–∫–∏ –∑–∞–ø—É—â–µ–Ω—ã, user: {user_name}')
        await message.answer(text=f"–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞. user: {user_name}", reply_markup=buttons.main_menu)
        await state.finish()


async def start_single_parse(message: types.Message, state: FSMContext):
    await state.update_data(user_name=message.text)
    data = await state.get_data()
    try:
        await message.reply(text=f"–ó–∞–ø—É—Å–∫ –æ–¥–∏–Ω–æ—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {data.get('user_name')}", reply_markup=buttons.main_menu)
        await get_requests(message, user_name=data.get('user_name'))
    except json.decoder.JSONDecodeError:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    finally:
        await state.finish()


async def get_requests(message: types.Message, user_name: str, is_schedule: bool = False):

    def is_good(dataclass_is_verified):
        return 'üçöüêàüôçüèª‚Äç‚ôÄÔ∏è' if dataclass_is_verified else '‚ùå'

    sess = check_cookies(user_name=user_name)
    if sess is None:
        await message.answer(text="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è")
        return
    enterprises = start_parse(sess)
    if not enterprises:
        if not is_schedule:
            await message.answer(text="–ó–∞—è–≤–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            logger.info(f"not is_schedule; user: {user_name}; –ó–∞—è–≤–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        else:
            logger.info(f"is_schedule; user: {user_name}; –ó–∞—è–≤–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")

    else:
        for enterprise in enterprises:
            url = f"http://mercury.vetrf.ru/gve/{enterprise.href}"
            answer = f"{enterprise.enterprise_name} \n - <b>–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {enterprise.numbers_of_requests}</b>;\n "
            pk = 1
            for transaction in enterprise.transactions_data:
                if (transaction.date_from - datetime.now()).total_seconds() < 0:
                    NOTIFIED_TRANSACTION.clear()
                if transaction.rq_transaction_pk in NOTIFIED_TRANSACTION and is_schedule:
                    continue
                # pk = 1
                car_num = transaction.car_number.value
                if transaction.trailer_number:
                    trailer_num = transaction.trailer_number.value
                    trailer_string = f"{is_good(transaction.trailer_number.is_verified)} <b>–ù–æ–º–µ—Ä –ø—Ä–∏—Ü–µ–ø–∞:</b> {trailer_num};\n"
                else:
                    trailer_string = ""
                is_confirm = "–û—Ñ–æ—Ä–º–ª–µ–Ω–æ" if transaction.is_confirm else "–ù–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ"
                bill_of_lading = transaction.bill_of_lading
                transaction_type = transaction.transaction_type
                product = transaction.product
                answer += f"\n<b>–ó–∞—è–≤–∫–∞ {pk}:</b>\n" \
                    f"{is_good(transaction.car_number.is_verified)} <b>–ù–æ–º–µ—Ä –∞–≤—Ç–æ:</b> {car_num};\n"\
                    f"{trailer_string}"\
                    f"{is_good(transaction_type.is_verified)} <b>–°–ø–æ—Å–æ–± —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–∑–∫–µ:</b> {transaction_type.value};\n"\
                    f"{is_good(product.is_verified)}<b>–ü—Ä–æ–¥—É–∫—Ç:</b> {product.value};\n"\
                    f"{'üçöüêàüôçüèª‚Äç‚ôÄÔ∏è' if transaction.is_expiration() else '‚ùå '}–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ 36—á: {transaction.is_expiration()}\n"\
                    f"{is_good(transaction.bill_of_lading_date.is_verified)}<b>–ù–æ–º–µ—Ä –¢–¢–ù:</b> {transaction.bill_of_lading} –æ—Ç {transaction.bill_of_lading_date.value};\n"
                if not transaction.is_confirm:
                    answer += f"<b>–í—ã—Ä–∞–±–æ—Ç–∫–∞:</b> {transaction.date_from}\n"
                answer += f"<b>\n{is_confirm}\n</b>"
                    # f"<b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> {transaction.recipient_enterprise};\n"\
                    # f"<b>–ù–∞ –ø–ª–æ—â–∞–¥–∫—É:</b> {transaction.recipient_company};\n"
                pk += 1
                NOTIFIED_TRANSACTION.append(transaction.rq_transaction_pk)
            logger.debug(answer)
            logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞—è–≤–∫–∏. user: {user_name}")
            if "–ó–∞—è–≤–∫–∞" not in answer:
                answer = ""
            if answer != "":
                answer += f"\n <a href=\"{url}\">–û—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫</a>; \n"
                await message.answer(text=answer,
                                     parse_mode=types.ParseMode.HTML
                                     )


async def start_user_registration(message: types.Message):
    await CreateUserState.login.set()
    await message.reply('–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω', reply_markup=buttons.cancel_menu)


@ascii_only_message
async def load_login(message: types.Message, state: FSMContext):
    await state.update_data(login=message.text)
    await CreateUserState.password.set()
    await message.reply('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å', reply_markup=buttons.cancel_menu)


@ascii_only_message
async def load_password(message: types.Message, state: FSMContext):
    await state.update_data(password=message.text)
    await CreateUserState.name.set()
    await message.reply('–í–≤–µ–¥–∏—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è', reply_markup=buttons.cancel_menu)


@ascii_only_message
async def load_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    data = await state.get_data()
    if save_user_data(data.get('name'), **{"login": data.get('login'), "password": data.get('password'), "cookies": {}}):
        await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {data.get('name')} –¥–æ–±–∞–≤–ª–µ–Ω", reply_markup=buttons.main_menu)
    else:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    await state.finish()


async def delete_user_start(message: types.Message):
    await DeleteUserState.user_name.set()
    users_munu = buttons.get_menu_with_users()
    await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', reply_markup=users_munu)


async def delete_user_confirm(message: types.Message, state: FSMContext):
    if message.text in get_users_data():
        await state.update_data(name=message.text)
        await DeleteUserState.confirm.set()
        await message.reply(f"–¢–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.text}?", reply_markup=buttons.confirm_menu)
    else:
        users_munu = buttons.get_menu_with_users()
        await message.reply(f"–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", reply_markup=users_munu)


async def delete_user_finish(message: types.Message, state: FSMContext):
    await state.update_data(confirm=message.text)
    data = await state.get_data()
    if data.get("confirm").lower() == "–¥–∞" or data.get("confirm").lower() == "yes":
        if delete_user(data.get("name")):
            logger.info(f"{data.get('name')} —É–¥–∞–ª–µ–Ω(–∞)")
            await message.reply(f"{data.get('name')} —É–¥–∞–ª–µ–Ω(–∞)", reply_markup=buttons.main_menu)
        else:
            await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {data.get('name')}")
        await state.finish()
    elif data.get("confirm").lower() == "–Ω–µ—Ç" or data.get("confirm").lower() == "no":
        await state.finish()
        await message.answer("–û—Ç–º–µ–Ω–∞", reply_markup=buttons.main_menu)
    else:
        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ: –¥–∞(yes) –∏–ª–∏ –Ω–µ—Ç(no)", reply_markup=buttons.confirm_menu)

        
async def cancel_periodic_parse(message: types.Message):
    user_tasks = scheduler.get_user_tasks(message.from_user.id)
    if len(user_tasks) > 0:
        scheduler.job_remove(user_tasks)
        logger.info('–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ —Ç–∞—Å–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã')
        await message.answer(text="–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    else:
        logger.info('–ü–æ–ø—ã—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö —Ç–∞—Å–æ–∫. –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ —Ç–∞—Å–∫–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã')
        await message.answer(text="–ù–µ –∑–∞–ø—É—â–µ–Ω–æ")


async def start_response(message: types.Message):
    await message.reply("/help, —á—Ç–æ–±—ã –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ",
                        reply_markup=buttons.main_menu
                        )


async def help_response(message: types.Message):
    help_message = "–ü–∞—Ä—Å–µ—Ä –Ω–∞–ª–∏—á–∏—è –∑–∞—è–≤–æ–∫ –¥–ª—è –ì–í–≠ –≤ –ú–µ—Ä–∫—É—Ä–∏–∏.\n" + \
        "1. \"–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫\" - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–µ—Ä–º —Å –∑–∞—è–≤–∫–∞–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π; \n" + \
        "2. \"–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏\" - –ø.1, –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç; \n" + \
        "3. \"–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å\" - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è \n" \
        "/adduser - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \n" \
        "/deleteuser - —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \n" \
        "/cancel - —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è \n"
    await message.reply(text=help_message, reply_markup=buttons.main_menu)


async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    logger.info('–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è')
    if current_state is None:
        return
    await state.finish()
    await message.reply("–û–∫~", reply_markup=buttons.main_menu)


